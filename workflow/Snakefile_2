
configfile: 'config/config.yml'

include: 'Snakefile_0'

AGGR = ['yr2', 'yr2to9_lag']
EXPM = ['hindcast', 'observed']

rule all:
    input:
        # expand('results/exp2/analysis/{aggr}/input', aggr = AGGR)
        # expand('results/exp2/analysis/{aggr}/nh-input/time_series', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/attributes', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/basins.txt', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/basins.yml', aggr = AGGR),
        # expand('results/exp2/analysis/{expm}/gamlss', expm = EXPM),
        'results/exp2/analysis/hindcast/lstm/yr2',
        'results/exp2/analysis/hindcast/xgboost/yr2'
        # 'results/analysis/yr2to9_lag/nh-output/time_series'

rule select_stations:
    input:
        script='workflow/scripts/select-stations-exp2.R',
        config='config/config.yml'
    output:
        'results/exp2/stations.txt'
    conda:
        'decadal-flood-prediction'
    shell:
        """
        Rscript {input.script} {input.config} {output}
        """

rule get_discharge_data:
    input:
        stations='results/exp2/stations.txt',
        script='workflow/scripts/external/R/download-discharge-data.R'
    output:
        directory('results/exp2/nrfa-discharge-summaries'),
        'results/exp2/nrfa-metadata.parquet'
    params:
        outputdir='results/exp2'
    conda:
        'decadal-flood-prediction'
    shell:
        """
        Rscript {input.script} {input.stations} {params.outputdir}
        """

rule nao_matching:
    input:
        'results/exp2/nrfa-discharge-summaries',
        script='workflow/scripts/external/R/perform-nao-matching.R',
        config='config/config.yml',
        obs='results/intermediate/obs.parquet',
        fcst='results/intermediate/ensemble-forecast'
    output:
        'results/exp2/analysis/{aggr}/obs_study_period.parquet',
        'results/exp2/analysis/{aggr}/ensemble_fcst.parquet',
        'results/exp2/analysis/{aggr}/ensemble_mean_fcst.parquet',
        'results/exp2/analysis/{aggr}/matched_ensemble.parquet',
        'results/exp2/analysis/{aggr}/matched_ensemble_error.parquet'
    params:
        outputdir='results/exp2/analysis'
    conda:
        'decadal-flood-prediction'
    shell:
        """
        Rscript {input.script} {input.config} {input.obs} {input.fcst} {wildcards.aggr} {params.outputdir}
        """

rule build_catchment_dataset:
    input:
        'results/exp2/nrfa-discharge-summaries',
        expand('results/exp2/analysis/{aggr}/matched_ensemble.parquet', aggr = AGGR),
        expand('results/exp2/analysis/{aggr}/matched_ensemble_error.parquet', aggr = AGGR),
        script='workflow/scripts/external/R/build-catchment-dataset.R',
        config='config/config.yml',
        obs='results/intermediate/obs.parquet'
    output:
        directory('results/exp2/analysis/{aggr}/input')
    params:
        outputdir='results/exp2'
    conda:
        'decadal-flood-prediction'
    shell:
        """
        Rscript {input.script} {input.config} {input.obs} {wildcards.aggr} {params.outputdir}
        """

rule prepare_nh_input:
    input:
        expand('results/exp2/analysis/{aggr}/input', aggr = AGGR),
        script='workflow/scripts/prepare-nh-input.py',
        config='config/config.yml'
    output:
        directory('results/exp2/analysis/{aggr}/nh-input/time_series'),
        directory('results/exp2/analysis/{aggr}/nh-input/attributes'),
        'results/exp2/analysis/{aggr}/nh-input/basins.txt',
        'results/exp2/analysis/{aggr}/nh-input/basins.yml'
    params:
        outputdir='results/exp2'
    conda:
        'decadal-flood-prediction'
    shell:
        """
        python {input.script} {input.config} {wildcards.aggr} {params.outputdir}
        """

rule fit_gamlss_models:
    input:
        expand('results/exp2/analysis/{aggr}/input', aggr = AGGR),
        script='workflow/scripts/fit-gamlss-models.R',
        config='config/config.yml'
    output:
        directory('results/exp2/analysis/{expm}/gamlss')
    wildcard_constraints:
        expm='|'.join([re.escape(x) for x in EXPM]),
    params:
        method='forward',
        outputdir='results/exp2'
    conda:
        'decadal-flood-prediction'
    shell:
        """
        Rscript {input.script} {input.config} {wildcards.expm} {params.method} {params.outputdir}
        """

rule fit_lstm_models:
    input:
        expand('results/exp2/analysis/yr2/nh-input/time_series', aggr = AGGR),
        expand('results/exp2/analysis/yr2/nh-input/attributes', aggr = AGGR),
        expand('results/exp2/analysis/yr2/nh-input/basins.txt', aggr = AGGR),
        script='workflow/scripts/run-nh.py',
        config='config/config.yml',
        nh_config='results/exp2/analysis/yr2/nh-input/basins.yml',
    output:
        directory('results/exp2/analysis/hindcast/lstm/yr2')
    # wildcard_constraints:
    #     expm='|'.join([re.escape(x) for x in EXPM])
    params:
        aggregation_period='yr2'
    conda:
        'neuralhydrology'
    shell:
        """
        python {input.script} {input.config} {input.nh_config} {params.aggregation_period} {output}
        """

rule fit_xgboost_models:
    input:
        expand('results/exp2/analysis/yr2/nh-input/time_series', aggr = AGGR),
        expand('results/exp2/analysis/yr2/nh-input/attributes', aggr = AGGR),
        expand('results/exp2/analysis/yr2/nh-input/basins.txt', aggr = AGGR),
        script='workflow/scripts/run-mlp.py',
        config='config/config.yml',
        nh_config='results/exp2/analysis/yr2/nh-input/basins.yml',
    output:
        directory('results/exp2/analysis/hindcast/xgboost/yr2')
    params:
        aggregation_period='yr2',
        model_type='xgboost'
    conda:
        'neuralhydrology'
    shell:
        """
        python {input.script} {input.config} {input.nh_config} {params.aggregation_period} {params.model_type} {output}
        """

# rule fit_tabnet_models:
#     input:
#         expand('results/exp2/analysis/yr2/nh-input/time_series', aggr = AGGR),
#         expand('results/exp2/analysis/yr2/nh-input/attributes', aggr = AGGR),
#         expand('results/exp2/analysis/yr2/nh-input/basins.txt', aggr = AGGR),
#         script='workflow/scripts/run-mlp.py',
#         config='config/config.yml',
#         nh_config='results/exp2/analysis/yr2/nh-input/basins.yml',
#     output:
#         directory('results/exp2/analysis/hindcast/tabnet/yr2')
#     params:
#         aggregation_period='yr2',
#         model_type='tabnet'
#     conda:
#         'neuralhydrology'
#     shell:
#         """
#         python {input.script} {input.config} {input.nh_config} {params.aggregation_period} {params.model_type} {output}
#         """

# rule make_plots:
#     input:
#         expand('results/analysis/{expm}', expm = EXPM),
#         script='workflow/scripts/R/evaluate-models.R',
#         config='config/config.yml'
#     output:
#         'results/fig/fig1.png',
#         'results/fig/fig2.png',
#         'results/fig/fig3.png',
#         'results/fig/fig4.png',
#         'results/fig/figS1.png',
#         'results/fig/figS2.png',
#         'results/fig/figS3.png',
#         'results/fig/figS4.png'
#     params:
#         outputdir='results'
#     shell:
#         """
#         Rscript {input.script} {input.config} {params.outputdir}
#         """
