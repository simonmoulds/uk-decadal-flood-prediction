import os

CONFIG = 'config/config.yml'
configfile: CONFIG

include: 'Snakefile_0'

AGGR = ['yr2', 'yr2to5_lag', 'yr2to9_lag']
EXPM = ['hindcast', 'observed']

EXP2_DIRECTORY = os.path.join(RESULTS_DIRECTORY, 'exp2')
STATIONS_FILE = os.path.join(EXP2_DIRECTORY, 'stations.txt')
NRFA_DISCHARGE_DIRECTORY = os.path.join(EXP2_DIRECTORY, 'nrfa-discharge-summaries')
NRFA_METADATA_FILE = os.path.join(EXP2_DIRECTORY, 'nrfa-metadata.parquet')
ANALYSIS_DIRECTORY = os.path.join(EXP2_DIRECTORY, 'analysis')

rule all:
    input:
        # OBSERVED_DATA_FILE,
        # ENSEMBLE_FORECAST_DATA_DIRECTORY
        # STATIONS_FILE,
        # NRFA_DISCHARGE_DIRECTORY,
        # NRFA_METADATA_FILE,
        # os.path.join(config['output_data'], 'exp2', 'stations.txt'),
        # os.path.join(config['output_data'], 'exp2', 'nrfa-discharge-summaries'),
        # os.path.join(config['output_data'], 'exp2', 'nrfa-metadata.parquet')
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/obs_study_period.parquet', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/ensemble_fcst.parquet', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/ensemble_mean_fcst.parquet', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/matched_ensemble.parquet', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/matched_ensemble_error.parquet', aggr = AGGR)
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/input', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/time_series', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/attributes', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/basins.txt', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/basins.yml', aggr = AGGR),
        # expand(ANALYSIS_DIRECTORY + '/hindcast/gamlss/{aggr}', aggr = AGGR)
        # expand(ANALYSIS_DIRECTORY + '/hindcast/xgboost/{aggr}', aggr = AGGR)
        # expand(ANALYSIS_DIRECTORY + '/hindcast/tabnet/{aggr}', aggr = AGGR)
        expand(EXP2_DIRECTORY + '/fig/{aggr}/fig1.png', aggr = AGGR),
        expand(EXP2_DIRECTORY + '/fig/{aggr}/fig2.png', aggr = AGGR)
        # expand('results/exp2/fig/{aggr}/fig1.png', aggr = AGGR),
        # expand('results/exp2/fig/{aggr}/fig2.png', aggr = AGGR)
        # expand('results/exp2/fig/{aggr}/fig3.png', aggr = AGGR),
        # expand('results/exp2/fig/{aggr}/fig4.png', aggr = AGGR)

rule select_stations:
    input:
        script='workflow/scripts/select-stations-exp2.R',
        config=CONFIG
    output:
        STATIONS_FILE
    params:
        outfile=STATIONS_FILE
    resources:
        time = "00:30:00",
        mem_mb = 4000,
        partition = "short"
    shell:
        """
        Rscript {input.script} {config[input_data_root]} {params.outfile} {input.config}
        """

rule get_discharge_data:
    input:
        stations=STATIONS_FILE,
        script='workflow/scripts/download-discharge-data.R'
    output:
        directory(NRFA_DISCHARGE_DIRECTORY),
        NRFA_METADATA_FILE
    params:
        outputdir=EXP2_DIRECTORY
    resources:
        time = "00:30:00",
        mem_mb = 4000,
        partition = "short"
    shell:
        """
        Rscript {input.script} {input.stations} {params.outputdir}
        """

rule nao_matching:
    input:
        NRFA_DISCHARGE_DIRECTORY,
        script='workflow/scripts/perform-nao-matching.R',
        config='config/config.yml',
        obs=OBSERVED_DATA_FILE,
        fcst=ENSEMBLE_FORECAST_DATA_DIRECTORY
    output:
        ANALYSIS_DIRECTORY + '/{aggr}/obs_study_period.parquet',
        ANALYSIS_DIRECTORY + '/{aggr}/ensemble_fcst.parquet',
        ANALYSIS_DIRECTORY + '/{aggr}/ensemble_mean_fcst.parquet',
        ANALYSIS_DIRECTORY + '/{aggr}/matched_ensemble.parquet',
        ANALYSIS_DIRECTORY + '/{aggr}/matched_ensemble_error.parquet'
    params:
        outputdir=ANALYSIS_DIRECTORY
    resources:
        time = "00:30:00",
        mem_mb = 4000,
        partition = "short"
    shell:
        """
        Rscript {input.script} {input.config} {input.obs} {input.fcst} {wildcards.aggr} {params.outputdir}
        """

rule build_catchment_dataset:
    input:
        NRFA_DISCHARGE_DIRECTORY,
        expand(ANALYSIS_DIRECTORY + '/{aggr}/matched_ensemble.parquet', aggr = AGGR),
        expand(ANALYSIS_DIRECTORY + '/{aggr}/matched_ensemble_error.parquet', aggr = AGGR),
        script='workflow/scripts/build-catchment-dataset.R',
        config='config/config.yml',
        obs=OBSERVED_DATA_FILE
    output:
        directory(ANALYSIS_DIRECTORY + '/{aggr}/input')
    params:
        outputdir=EXP2_DIRECTORY
    resources:
        time = "00:30:00",
        mem_mb = 4000,
        partition = "short"
    shell:
        """
        Rscript {input.script} {input.config} {input.obs} {wildcards.aggr} {params.outputdir}
        """

rule prepare_nh_input:
    input:
        expand(ANALYSIS_DIRECTORY + '/{aggr}/input', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/input', aggr = AGGR),
        script='workflow/scripts/prepare-nh-input.py',
        config='config/config.yml'
    output:
        directory(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/time_series'),
        directory(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/attributes'),
        ANALYSIS_DIRECTORY + '/{aggr}/nh-input/basins.txt',
        ANALYSIS_DIRECTORY + '/{aggr}/nh-input/basins.yml'
        # directory('results/exp2/analysis/{aggr}/nh-input/time_series'),
        # directory('results/exp2/analysis/{aggr}/nh-input/attributes'),
        # 'results/exp2/analysis/{aggr}/nh-input/basins.txt',
        # 'results/exp2/analysis/{aggr}/nh-input/basins.yml'
    params:
        outputdir=EXP2_DIRECTORY
        # outputdir='results/exp2'
    resources:
        time = "00:30:00",
        mem_mb = 4000,
        partition = "short"
    conda:
        'decadal-flood-prediction'
    shell:
        """
        python {input.script} {config[input_data_root]} {wildcards.aggr} {params.outputdir} {input.config}
        """

rule fit_gamlss_models:
    input:
        expand(ANALYSIS_DIRECTORY + '/{aggr}/input', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/input', aggr = AGGR),
        script='workflow/scripts/fit-gamlss-models.R',
        config='config/config.yml'
    output:
        directory(ANALYSIS_DIRECTORY + '/hindcast/gamlss/{aggr}')
        # directory('results/exp2/analysis/hindcast/gamlss/{aggr}')
    params:
        experiment='hindcast',
        # aggregation_period='yr2',
        method='forward',
        outputdir=EXP2_DIRECTORY
        # outputdir='results/exp2'
    resources:
        time = "01:00:00",
        mem_mb = 4000,
        partition = "short"
    # conda:
    #     'decadal-flood-prediction'
    shell:
        """
        Rscript {input.script} {input.config} {params.experiment} {wildcards.aggr} {params.method} {params.outputdir}
        """

rule fit_xgboost_models:
    input:
        expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/time_series', aggr = AGGR),
        expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/attributes', aggr = AGGR),
        expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/basins.txt', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/time_series', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/attributes', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/basins.txt', aggr = AGGR),
        script='workflow/scripts/run-mlp.py',
        config='config/config.yml',
        # nh_config=expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/basins.yml', aggr = AGGR)
        # nh_config=expand(ANALYSIS_DIRECTORY, '/{aggr}/nh-input/basins.yml', aggr = AGGR)
    output:
        directory(ANALYSIS_DIRECTORY + '/hindcast/xgboost/{aggr}')
        # directory('results/exp2/analysis/hindcast/xgboost/{aggr}')
    params:
        model_type='xgboost',
        inputdir=ANALYSIS_DIRECTORY
    resources:
        time = "02:00:00",
        mem_mb = 4000,
        partition = "short"
    conda:
        'neuralhydrology'
    shell:
        """
        python {input.script} {params.inputdir} {wildcards.aggr} {params.model_type} {output} {input.config}
        """

rule fit_tabnet_models:
    input:
        expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/time_series', aggr = AGGR),
        expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/attributes', aggr = AGGR),
        expand(ANALYSIS_DIRECTORY + '/{aggr}/nh-input/basins.txt', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/time_series', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/attributes', aggr = AGGR),
        # expand('results/exp2/analysis/{aggr}/nh-input/basins.txt', aggr = AGGR),
        script='workflow/scripts/run-mlp.py',
        config='config/config.yml',
        # nh_config=expand(ANALYSIS_DIRECTORY, '/{aggr}/nh-input/basins.yml', aggr = AGGR)
        # nh_config='results/exp2/analysis/{aggr}/nh-input/basins.yml',
    output:
        directory(ANALYSIS_DIRECTORY + '/hindcast/tabnet/{aggr}')
        # directory('results/exp2/analysis/hindcast/tabnet/{aggr}')
    params:
        model_type='tabnet',
        inputdir=ANALYSIS_DIRECTORY
    resources:
        time = "02:00:00",
        mem_mb = 4000,
        partition = "short",
        slurm = "gres=gpu:v100:1"
    conda:
        'neuralhydrology'
    shell:
        """
        python {input.script} {params.inputdir} {wildcards.aggr} {params.model_type} {output} {input.config}
        """

rule make_hindcast_plots:
    input:
        expand(ANALYSIS_DIRECTORY + '/hindcast/gamlss/{aggr}', aggr = AGGR),
        expand(ANALYSIS_DIRECTORY + '/hindcast/xgboost/{aggr}', aggr = AGGR),
        expand(ANALYSIS_DIRECTORY + '/hindcast/tabnet/{aggr}', aggr = AGGR),
        script='workflow/scripts/evaluate-nh-output.R',
        config='config/config.yml'
    output:
        EXP2_DIRECTORY + '/fig/{aggr}/fig1.png',
        EXP2_DIRECTORY + '/fig/{aggr}/fig2.png'
        # 'results/exp2/fig/{aggr}/fig3.png',
        # 'results/exp2/fig/{aggr}/fig4.png'
    params:
        outputdir=EXP2_DIRECTORY
    resources:
        time = "02:00:00",
        mem_mb = 4000,
        partition = "short"
    shell:
        """
        Rscript {input.script} {config[input_data_root]} {wildcards.aggr} {params.outputdir} {input.config}
        """
