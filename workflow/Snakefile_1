import os
import pandas as pd

include: 'Snakefile_0'

CONFIG = 'config/config_2.yml'
configfile: CONFIG

SEASON = ['SON', 'DJFM']
SEASON_STAT = ['DJFM']
AGGR = ['yr2', 'yr2to5_lag', 'yr2to9_lag']
AGGR_STAT = ['yr2', 'yr2to5_lag']
EXPM = ['hindcast_Q95', 'observed_Q95']

STATIONS_FILE = 'resources/station_list_with_grid_coords.parquet'
df = pd.read_parquet(STATIONS_FILE)
STATIONS = list(df['id'])
GRIDS = list(df['coord'].unique())
ANALYSIS_DIRECTORY = os.path.join('results/analysis')

rule all:
    input:
        # "results/prepare_field_input_data.done",
        # expand('results/analysis/input/discharge/NRFA/{season}', season=SEASON),
        # expand('results/analysis/input/nao_matching/{aggr}/{season}/ensemble_mean_fcst.parquet', aggr=AGGR, season=SEASON_STAT),
        # expand('results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble.parquet', aggr=AGGR, season=SEASON_STAT),
        # expand('results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble_error.parquet', aggr=AGGR, season=SEASON_STAT),
        # expand('results/analysis/input/combined/{aggr}/{season}/{stn}', aggr=AGGR, season=SEASON_STAT, stn=STATIONS),
        expand('results/analysis/output/{expm}/gamlss/{aggr}/{season}/fit/{stn}', expm=EXPM, aggr=AGGR, season=SEASON_STAT, stn=STATIONS),
        expand('results/analysis/output/{expm}/gamlss/{aggr}/{season}/prediction/{stn}', expm=EXPM, aggr=AGGR, season=SEASON_STAT, stn=STATIONS)
        # expand('results/fig/{aggr_plot}', aggr_plot=AGGR_PLOT)


rule prepare_input_data:
    input:
        'results/obs_input.done',
        'results/mod_input.done',
        obs=OBSERVED_DATA,
        fcst=ENSEMBLE_FORECAST_DATA
    output:
        ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/observed.parquet',
        ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/ensemble_forecast.parquet'
    params:
        outputdir=ANALYSIS_DIRECTORY + '/input/meteo'
    resources:
        time = "00:30:00",
        mem_mb = 4000,
        partition = "short"
    script:
        'decadal-prediction-scripts/R/prepare-input-data.R'


rule prepare_field_input_data:
    input:
        'results/obs_field_input.done',
        'results/mod_field_input.done',
        obs=OBSERVED_FIELD_DATA,
        fcst=ENSEMBLE_FORECAST_FIELD_DATA
    output:
        directory(ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/observed-field/{grid}'),
        directory(ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/ensemble-forecast-field/{grid}')
    params:
        outputdir=ANALYSIS_DIRECTORY + '/input/meteo'
    resources:
        time = "12:00:00",
        mem_mb = 32000,
        partition = "short"
    script:
        'decadal-prediction-scripts/R/prepare-field-input-data.R'


rule prepare_field_input_data_done:
    input:
        expand(ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/observed.parquet', aggr=AGGR, season=SEASON),
        expand(ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/ensemble_forecast.parquet', aggr=AGGR, season=SEASON),
        expand(ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/observed-field/{grid}', aggr=AGGR, grid=GRIDS, season=SEASON),
        expand(ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/ensemble-forecast-field/{grid}', aggr=AGGR, grid=GRIDS, season=SEASON)
    output:
        "results/prepare_field_input_data.done"
    shell:
        """
        touch results/prepare_field_input_data.done
        """


rule get_nrfa_discharge_data:
    input:
        stations=STATIONS_FILE,
    output:
        directory('results/analysis/input/discharge/NRFA/{season}')
    params:
        outputdir='results/analysis/input/discharge/NRFA'
    resources:
        time = "00:30:00",
        mem_mb = 4000,
        partition = "short"
    script:
        'decadal-prediction-scripts/R/download-discharge-data.R'

# rule get_grdc_discharge_data:
#     input:
#         stations=STATIONS_FILE,
#         config=CONFIG
#     output:
#         directory('results/analysis/input/discharge/GRDC/{season}')
#     params:
#         outputdir='results/analysis/input/discharge/GRDC'
#     resources:
#         time = "00:30:00",
#         mem_mb = 4000,
#         partition = "short"
#     script:
#         'decadal-prediction-scripts/R/process-grdc-data.R'


rule nao_matching:
    input:
        obs=ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/observed.parquet',
        fcst=ANALYSIS_DIRECTORY + '/input/meteo/{aggr}/{season}/ensemble_forecast.parquet'
    output:
        'results/analysis/input/nao_matching/{aggr}/{season}/ensemble_mean_fcst.parquet',
        'results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble.parquet',
        'results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble_error.parquet'
    params:
        outputdir='results/analysis/input/nao_matching',
        match_var="nao"
    resources:
        time = "01:00:00",
        mem_mb = 32000,
        cpus_per_task = 16,
        partition = "short"
    script:
        'decadal-prediction-scripts/R/perform-nao-matching.R'


rule build_catchment_dataset:
    input:
        'results/prepare_field_input_data.done',
        'results/analysis/input/discharge/NRFA/{season}',
        'results/analysis/input/nao_matching/{aggr}/{season}/ensemble_mean_fcst.parquet',
        'results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble.parquet',
        'results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble_error.parquet',
        stations=STATIONS_FILE
    output:
        directory('results/analysis/input/combined/{aggr}/{season}/{stn}')
    params:
        outputdir='results/analysis/input'
    resources:
        time = "03:00:00",
        mem_mb = 32000,
        partition = "short"
    script:
        'decadal-prediction-scripts/R/build-catchment-dataset-global.R'


rule fit_gamlss_models:
    input:
        'results/analysis/input/combined/{aggr}/{season}/{stn}'
    output:
        directory('results/analysis/output/{expm}/gamlss/{aggr}/{season}/fit/{stn}'),
        directory('results/analysis/output/{expm}/gamlss/{aggr}/{season}/prediction/{stn}')
    params:
        method='cv',
        outputdir='results/analysis'
    resources:
        time = "01:00:00",
        mem_mb = 4000,
        partition = "short"
    script:
        'decadal-prediction-scripts/R/fit-gamlss-models.R'

# rule all:
#     input:
#         expand('results/analysis/input/discharge/NRFA/{season}', season=SEASON),
#         expand('results/analysis/input/meteo/{aggr}/{season}/observed.parquet', aggr=AGGR, season=SEASON),
#         expand('results/analysis/input/meteo/{aggr}/{season}/ensemble_forecast.parquet', aggr=AGGR, season=SEASON),
#         expand('results/analysis/input/nao_matching/{aggr}/{season}/ensemble_mean_fcst.parquet', aggr=AGGR, season=SEASON),
#         expand('results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble.parquet', aggr=AGGR, season=SEASON),
#         expand('results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble_error.parquet', aggr=AGGR, season=SEASON),
#         expand('results/analysis/input/combined/{aggr}/{season}/{stn}', aggr=AGGR, season=SEASON, stn=STATIONS)
#         # expand('results/fig/{aggr_plot}', aggr_plot=AGGR_PLOT)

# rule get_nrfa_discharge_data:
#     input:
#         stations=STATIONS_FILE,
#     output:
#         directory('results/analysis/input/discharge/NRFA/{season}')
#     params:
#         outputdir='results/analysis/input/discharge/NRFA'
#     resources:
#         time = "00:30:00",
#         mem_mb = 4000,
#         partition = "short"
#     script:
#         'decadal-prediction-scripts/R/download-discharge-data.R'

# rule prepare_input_data:
#     input:
#         # 'results/obs_input.done',
#         # 'results/mod_input.done',
#         obs=OBSERVED_DATA,
#         fcst=ENSEMBLE_FORECAST_DATA
#     output:
#         'results/analysis/input/meteo/{aggr}/{season}/observed.parquet',
#         'results/analysis/input/meteo/{aggr}/{season}/ensemble_forecast.parquet'
#     params:
#         outputdir=ANALYSIS_DIRECTORY + '/input/meteo'
#     resources:
#         time = "00:30:00",
#         mem_mb = 4000,
#         partition = "short"
#     script:
#         'decadal-prediction-scripts/R/prepare-input-data.R'

# rule nao_matching:
#     input:
#         obs='results/analysis/input/meteo/{aggr}/{season}/observed.parquet',
#         fcst='results/analysis/input/meteo/{aggr}/{season}/ensemble_forecast.parquet'
#     output:
#         'results/analysis/input/nao_matching/{aggr}/{season}/ensemble_mean_fcst.parquet',
#         'results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble.parquet',
#         'results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble_error.parquet'
#     params:
#         outputdir='results/analysis/input/nao_matching',
#         match_var="nao"
#     resources:
#         time = "01:00:00",
#         mem_mb = 32000,
#         cpus_per_task = 16,
#         partition = "short"
#     script:
#         'decadal-prediction-scripts/R/perform-nao-matching.R'

# rule build_catchment_dataset:
#     input:
#         # 'results/prepare_field_input_data.done',
#         'results/analysis/input/discharge/NRFA/{season}',
#         # 'results/analysis/input/discharge/GRDC/{season}',
#         'results/analysis/input/nao_matching/{aggr}/{season}/ensemble_mean_fcst.parquet',
#         'results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble.parquet',
#         'results/analysis/input/nao_matching/{aggr}/{season}/matched_ensemble_error.parquet',
#         stations=STATIONS_FILE
#     output:
#         directory('results/analysis/input/combined/{aggr}/{season}/{stn}')
#     params:
#         outputdir='results/analysis/input'
#     resources:
#         time = "03:00:00",
#         mem_mb = 32000,
#         partition = "short"
#     script:
#         'decadal-prediction-scripts/R/build-catchment-dataset-global.R'

# rule fit_gamlss_models:
#     input:
#         'results/analysis/input/combined/{aggr}/{season}/{stn}'
#     output:
#         directory('results/analysis/output/{expm}/gamlss/{aggr}/{season}/fit/{stn}'),
#         directory('results/analysis/output/{expm}/gamlss/{aggr}/{season}/prediction/{stn}')
#     params:
#         method='cv',
#         outputdir='results/analysis'
#     resources:
#         time = "01:00:00",
#         mem_mb = 4000,
#         partition = "short"
#     script:
#         'decadal-prediction-scripts/R/fit-gamlss-models.R'

# # rule make_plots:
# #     input:
# #         expand(ANALYSIS_DIRECTORY + '/hindcast/{aggr}/gamlss/fit/{stn}', aggr=AGGR_HINDCAST, stn=STATIONS),
# #         expand(ANALYSIS_DIRECTORY + '/hindcast/{aggr}/gamlss/prediction/{stn}', aggr=AGGR_HINDCAST, stn=STATIONS),
# #         expand(ANALYSIS_DIRECTORY + '/observed/{aggr}/gamlss/fit/{stn}', aggr=AGGR_OBS, stn=STATIONS),
# #         expand(ANALYSIS_DIRECTORY + '/observed/{aggr}/gamlss/prediction/{stn}', aggr=AGGR_OBS, stn=STATIONS)
# #     output:
# #         directory('results/fig/{aggr_plot}')
# #     wildcard_constraints:
# #         aggr_plot='|'.join([aggr for aggr in AGGR_PLOT])
# #     params:
# #         outputdir='results'
# #     resources:
# #         time = "01:00:00",
# #         mem_mb = 32000,
# #         cpus_per_task = 16,
# #         partition = "short"
# #     script:
# #         'decadal-prediction-scripts/R/make-plots-exp1.R'
